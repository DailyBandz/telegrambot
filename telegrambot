import telegram
import re
import pandas as pd
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackQueryHandler, Filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from datetime import datetime
from io import BytesIO


transaction_pattern = r"(.*)\n(¬£[\d,]+(?:\.\d{2})?)\n(.*)\n(.*)\n\n(.*)\n(.*)\n(.*)\n\nDone ‚úÖ (\d{1,2}\/\d{1,2})"


# create a bot instance
bot = telegram.Bot(token='6288060688:AAFwfQEFvfFwntDPPO_lqnUeZkEs_G9oipk')

# define global variables
transactions_received = []
total_amount_received = 0
books_df = pd.DataFrame(columns=['Sender', 'Amount', 'Recipient Bank', 'Recipient Account', 'Recipient Name', 'Date'])

# define menu options
menu_options = [['Scan Chat üîé'], ['Show Total üí∞'], ['Books üìö']]


def start(update, context):
    chat_id = update.effective_chat.id
    message = "Welcome to the Banking Bot! Please select an option below:"

    buttons = [
        [InlineKeyboardButton('Scan Chat üîé', callback_data='scan_chat')],
        [InlineKeyboardButton('Show Total üí∞', callback_data='show_total')],
        [InlineKeyboardButton('Books üìö', callback_data='books')]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)


def scan_chat(update, context):
    chat_id = update.effective_chat.id
    message = update.effective_message.text

    match = re.search(transaction_pattern, message)
    if match:
        sender, amount, sender_bank, sender_type, recipient_name, recipient_bank, recipient_account, date = match.groups()
        transaction = {'sender': sender, 'amount': amount, 'sender_bank': sender_bank, 'sender_type': sender_type, 'recipient_name': recipient_name, 'recipient_bank': recipient_bank, 'recipient_account': recipient_account, 'date': date}
        transactions_received.append(transaction)
        total_amount_received += float(amount.strip('¬£').replace(',', ''))
        message = f'Total amount received: ¬£{total_amount_received:.2f}'
        context.bot.send_message(chat_id=chat_id, text=message)
    else:
        context.bot.send_message(chat_id=chat_id, text="This message doesn't match the transaction pattern.")


def books(update, context):
    """Download individual excel sheets for all receiving banks and a group excel sheet containing all transactions received."""
    chat_id = update.effective_chat.id
    try:
        if not transactions_received:
            context.bot.send_message(chat_id=chat_id, text='There are no received transactions to export.')
            return
        group_data = []
        bank_data = {}
        for transaction in transactions_received:
            group_data.append(transaction)
            if transaction['recipient_bank'] not in bank_data:
                bank_data[transaction['recipient_bank']] = []
            bank_data[transaction['recipient_bank']].append(transaction)
        # Group data
        group_df = pd.DataFrame(group_data)
        group_file = BytesIO()
        group_writer = pd.ExcelWriter(group_file, engine='xlsxwriter')
        group_df.to_excel(group_writer, sheet_name='All Transactions', index=False)
        group_writer.save()
        group_file.seek(0)
        context.bot.send_document(chat_id=chat_id, document=group_file, filename='All Transactions.xlsx')
        # Bank data
        for bank, data in bank_data.items():
            bank_df = pd.DataFrame(data)
            bank_file = BytesIO()
            bank_writer = pd.ExcelWriter(bank_file, engine='xlsxwriter')
            bank_df.to_excel(bank_writer, sheet_name='All Transactions', index=False)
            bank_writer.save()
            bank_file.seek(0)
            context.bot.send_document(chat_id=chat_id, document=bank_file, filename=f'{bank} Transactions.xlsx')
    except Exception as e:
        context.bot.send_message(chat_id=chat_id, text=f"Oops, something went wrong: {str(e)}")



def show_total(update, context):
    """Show the total amount confirmed received throughout that chat."""
    chat_id = update.effective_chat.id
    message = f'Total amount received: ¬£{total_amount_received:.2f}'
    context.bot.send_message(chat_id=chat_id, text=message)

def build_books(update, context):
    """Download individual Excel sheets for all transaction documentation."""
    global books_df
    chat_id = update.effective_chat.id
    for recipient_type in set([transaction['recipient_type'] for transaction in transactions_received]):
        df = pd.DataFrame([transaction for transaction in transactions_received if transaction['recipient_type'] == recipient_type])
        df.to_excel(f'{recipient_type}_transactions.xlsx', index=False)
    for recipient_type in set([transaction['recipient_type'] for transaction in transactions_received]):
        context.bot.send_document(chat_id=chat_id, document=open(f'{recipient_type}_transactions.xlsx', 'rb'))

def check_transaction(update, context):
    """Check if a transaction has been received."""
    match = None  # Define match and set it to None
    chat_id = update.effective_chat.id
    message_id = update.effective_message.message_id
    
    if update.effective_message.text:
        match = re.search(transaction_pattern, update.effective_message.text)
        
    if match:
        sender, amount, recipient_bank, recipient_account, recipient_name, recipient_type, date = match.groups()
        transaction = {'sender': sender, 'amount': amount, 'recipient_bank': recipient_bank, 'recipient_account': recipient_account, 'recipient_name': recipient_name, 'recipient_type': recipient_type, 'date': date, 'message_id': message_id}
        
        if any(transaction['message_id'] == t['message_id'] for t in transactions_received):
            context.bot.send_message(chat_id=chat_id, text='This transaction has already been marked as received.')
        
    
   
   
def handle_callback(update, context):
    """Handle button callbacks."""
    global transactions_received
    global total_amount_received
    chat_id = update.effective_chat.id
    data = update.callback_query.data

    if data == 'scan_chat':
        scan_chat(update, context)
    elif data == 'show_total':
        show_total(update, context)
    elif data == 'books':
        books(update, context)
    elif data.startswith('received:'):
        message_id = update.callback_query.message.message_id
        context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='Received ‚úÖ')
        transaction_id = int(data.split(':')[1])
        transaction = [t for t in transactions_received if t['message_id'] == transaction_id][0]
        transactions_received.remove(transaction)
        total_amount_received += float(transaction['amount'])
        books_df = books_df.append({'Sender': transaction['sender'], 'Amount': transaction['amount'], 'Recipient Bank': transaction['recipient_bank'], 'Recipient Account': transaction['recipient_account'], 'Recipient Name': transaction['recipient_name'], 'Date': datetime.strptime(transaction['date'], '%d/%m/%Y')}, ignore_index=True)
    elif data.startswith('not_received:'):
        message_id = update.callback_query.message.message_id
        buttons = [[InlineKeyboardButton('Check Again ü§¶üèæ‚Äç‚ôÇÔ∏è', callback_data=f'check_again:{message_id}'), InlineKeyboardButton('Send Screenshot üì∏', callback_data=f'send_screenshot:{message_id}')]]
        reply_markup = InlineKeyboardMarkup(buttons)
        context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='What would you like to do?', reply_markup=reply_markup)
    elif data.startswith('check_again:'):
        message_id = update.callback_query.message.message_id
        context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='Has the transaction been received?')
    elif data.startswith('send_screenshot:'):
        message_id = update.callback_query.message.message_id
        context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='Please upload a screenshot of the transaction.')
        context.bot.delete_message(chat_id=chat_id, message_id=update.callback_query.message.reply_to_message.message_id)
    else:
        context.bot.send_message(chat_id=chat_id, text='Sorry, I could not understand your request.')



def handle_document(update, context):
    """Handle uploaded documents."""
    chat_id = update.effective_chat.id
    screenshot = update.message.document.get_file().download_as_bytearray()
    context.bot.send_message(chat_id=chat_id, text='Thank you for the screenshot. We will investigate this issue further.')

def build_menu(buttons, n_cols, header_buttons=None, footer_buttons=None):
    """Build a menu with the provided buttons."""
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu

def error_callback(update, context):
    """Log errors and send a message to notify the user."""
    logger.error('Update "%s" caused error "%s"', update, context.error)
    try:
        raise context.error
    except Exception as e:
        context.bot.send_message(chat_id=update.effective_chat.id, text=f"Oops, something went wrong: {str(e)}")


def main():
    """Start the bot."""
    updater = Updater(token='6288060688:AAFwfQEFvfFwntDPPO_lqnUeZkEs_G9oipk', use_context=True)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CommandHandler('scan_chat', scan_chat))
    dispatcher.add_handler(CommandHandler('show_total', show_total))
    dispatcher.add_handler(CommandHandler('books', books))
    dispatcher.add_handler(CommandHandler('books', build_books))
    dispatcher.add_handler(CallbackQueryHandler(handle_callback))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, check_transaction))
    dispatcher.add_handler(MessageHandler(Filters.document, handle_document))
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
